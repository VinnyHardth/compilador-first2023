INT int
ID x
PV ;
INT int
ID y
ABRE_COLC [
NUM_INT 5
FECHA_COLC ]
PV ;
INT int
ID func
ABRE_PAREN (
INT int
ID x
FECHA_PAREN )
ABRE_CHAV {
ID x
OP_ATRIB =
ID x
OP_SOMA +
NUM_INT 2
PV ;
RETURN return
ID x
PV ;
FECHA_CHAV }
INT int
ID dobra_valor
ABRE_PAREN (
INT int
ID x
FECHA_PAREN )
ABRE_CHAV {
ID x
OP_ATRIB =
ID x
OP_MULT *
NUM_INT 2
PV ;
FECHA_CHAV }
INT int
ID main
ABRE_PAREN (
FECHA_PAREN )
ABRE_CHAV {
ID x
OP_ATRIB =
NUM_INT 2
PV ;
ID x
OP_ATRIB =
ID dobra_valor
ABRE_PAREN (
ID func
ABRE_PAREN (
ID x
FECHA_PAREN )
FECHA_PAREN )
PV ;
IF if
ABRE_PAREN (
ID x
COMP_IGUAL ==
NUM_INT 8
FECHA_PAREN )
ABRE_CHAV {
INT int
ID z
PV ;
ID z
OP_ATRIB =
NUM_INT 0
PV ;
WHILE while
ABRE_PAREN (
ID y
MENOR <
NUM_INT 50
FECHA_PAREN )
ABRE_CHAV {
ID z
OP_ATRIB =
ID y
OP_SOMA +
NUM_INT 1
PV ;
FECHA_CHAV }
FECHA_CHAV }
ELSE else
ABRE_CHAV {
ID y
ABRE_COLC [
NUM_INT 0
FECHA_COLC ]
OP_ATRIB =
NUM_INT 0
PV ;
ID y
ABRE_COLC [
NUM_INT 1
FECHA_COLC ]
OP_ATRIB =
NUM_INT 1
PV ;
ID y
ABRE_COLC [
NUM_INT 2
FECHA_COLC ]
OP_ATRIB =
NUM_INT 2
PV ;
ID y
ABRE_COLC [
NUM_INT 3
FECHA_COLC ]
OP_ATRIB =
NUM_INT 3
PV ;
ID y
ABRE_COLC [
NUM_INT 4
FECHA_COLC ]
OP_ATRIB =
NUM_INT 4
PV ;
FECHA_CHAV }
RETURN return
NUM_INT 0
PV ;
FECHA_CHAV }